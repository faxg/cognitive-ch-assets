<form data-bind="submit: send">


    <div data-bind="foreach: messages">
        <div class="row">

            <!-- User message-->
            <span data-bind="if: from == 'user'">
              <div class="col-xs-7 col-sm-7 col-md-7 col-lg-7 from-user">
                <img src="img/user.png" class="img-circle" height="48" width="48"></img>
                <span data-bind="text: $data.text"></span>
        </div>
        </span>

        <!-- Watson message-->
        <span data-bind="if: from == 'watson'">
              <div class="col-xs-7 col-sm-7 col-md-7 col-lg-7 from-watson">
              <span data-bind="text: $data.text"></span>
        <img src="img/watson.png" class="img-circle" height="48" width="48">

        <!-- show details on Watson responses when showDetails flag is true -->
        <small data-bind="visible: $parent.showDetails">
                <br />
                <span data-bind="foreach: raw_response.intents">
                  <span class="label label-default" data-bind="text: '#' + intent + '('+(Math.round(confidence*100)/100)*100+'%)'"></span>
                </span>
                <span data-bind="foreach: raw_response.entities">
                  <span class="label label-success" data-bind="text: '@' + entity + '= '+ value"></span>
                </span>
              </small>
    </div>
    </span>

    </div>
    </div>



    <input class="chat-input" data-bind='value: userInput, valueUpdate: "afterkeydown"' placeholder="Ihre Eingabe bitte" />
    <!-- <div  class="checkbox" onmouseover="document.getElementById('checkboxShowDetails').style.display = 'block';"
    onmouseout="document.getElementById('checkboxShowDetails').style.display = 'none';">
        <label id="checkboxShowDetails"><input type="checkbox" data-bind="checked: showDetails">Details</label>
    </div> -->
    <div class="detailsPanel" onmouseover="viewmodel.showDetailsVisible(true)" onmouseout="viewmodel.showDetailsVisible(false)">
        <p><i class="fa fa-code"></i></p>
        <div data-bind="visible: showDetailsVisible">
            <div class="checkbox">
                <label id="checkboxShowDetails"><input type="checkbox" data-bind="checked: showDetails">Show details</label>
            </div>
            <!-- <div><button data-bind="click: clearMessages">Clear</button></div> -->
        </div>
    </div>


</form>


<div>
    <p>&nbsp;</p>
</div>

<!-- JSON view of latest Watson response -->
<div data-bind="visible: showDetails">
    <pre class="pre-scrollable" data-bind="text: JSON.stringify(conversationContext(),null,2)">
  </pre>
</div>




<script>
    // The view model is an abstract description of the state of the UI, but without any knowledge of the UI technology (HTML)
    var ViewModel = function() {
        self = this;
        self.messages = ko.observableArray(); // contains objects {from: 'watson|user', text: '...'}
        self.clearMessages = function() {
            self.messages([]);
            self.conversationContext({})
        };
        self.userInput = ko.observable('');
        self.conversationContext = ko.observable({});
        self.showDetails = ko.observable(false);
        self.showDetailsVisible = ko.observable(false);



        self.send = function() {
            if (self.userInput != "") {
                var text = self.userInput();
                self.messages.push({
                    text: text,
                    from: 'user'
                });
                self.userInput(''); // clear input text

                // call backend which in turn calls the watson conversation service
                $.get("/watson-chat?text=" + encodeURIComponent(text) + "&context=" + encodeURIComponent(JSON.stringify(self.conversationContext())), function(data) {
                    response = JSON.parse(data);
                    console.log(response);

                    self.messages.push({
                        text: response.output.text,
                        from: 'watson',
                        raw_response: response
                    });
                    // save the conversation context for subsequent calls
                    self.conversationContext(response);
                });
            }
        }

    };
    var viewmodel = new ViewModel;
    ko.applyBindings(viewmodel);
</script>
