<form data-bind="submit: send">


    <div data-bind="foreach: messages">
        <div class="row">
            <!-- User message-->
            <span data-bind="if: from == 'user'">
              <div class="col-xs-7 col-sm-7 col-md-7 col-lg-7 from-user">
                <img src="img/user.png" class="img-circle" height="48" width="48"></img>
                <span data-bind="text: $data.text"></span>
        </div>
        </span>

        <!-- Watson message-->
        <span data-bind="if: from == 'watson'">
              <div class="col-xs-7 col-sm-7 col-md-7 col-lg-7 from-watson">
              <span data-bind="text: $data.text"></span>
        <img src="img/watson.png" class="img-circle" height="48" width="48">

        <!-- show details on Watson responses when showDetails flag is true -->
        <small data-bind="visible: $parent.showDetails">
                <br />
                <span data-bind="foreach: detectedIntents">
                  <span class="label label-default" data-bind="text: '#' + intent + '('+(Math.round(confidence*100)/100)*100+'%)'"></span>
                </span>
                <span data-bind="foreach: detectedEntities">
                  <span class="label label-success" data-bind="text: '@' + entity + '= '+ value"></span>
                </span>
              </small>
    </div>
    </span>

    </div>
    </div>



    <input class="chat-input" data-bind='value: userInput, valueUpdate: "afterkeydown"' placeholder="Ihre Eingabe bitte" />



</form>

<div class="settingsPanel" onmouseover="viewmodel.showSettingsPanel(true)" onmouseout="viewmodel.showSettingsPanel(false)">
    <p><i class="fa fa-code"></i></p>
    <div data-bind="visible: showSettingsPanel">
        <div class="checkbox">
            <label id="checkboxShowDetails"><input type="checkbox" data-bind="checked: showDetails"/>Show details</label>
        </div>
        <div>
            <input class="ws-input" data-bind="value: workspaceId" />
        </div>
        <div><button class="btn btn-success" data-bind="click: clearMessages">Clear</button>
          <button class="btn btn-warning" data-bind="click: workspaceId(DEFAULT_WORKSPACE_ID)">Reset</button></div>
    </div>
</div>


<div>
    <p>&nbsp;</p>
</div>

<!-- JSON view of latest Watson response -->
<div data-bind="visible: showDetails">
    <textarea class="pre-scrollable" data-bind="textInput: conversationContextString">
    </textarea>
  </pre>
</div>

<!-- HTML5 audio tag. "autoplay" will trigger audio as soon as the src binding gets updated-->
<audio class="responseAudio"
      type="audio/wav"
      autoplay
      preload="none"
      data-bind="attr: {src: responseAudioUrl}">
</audio>



<script>
    var DEFAULT_WORKSPACE_ID = "{{WDC_WORKSPACE_ID}}"; // default WS id rendered into template


    var ViewModel = function() {
        self = this; // easier js scope handling
        self.workspaceId = ko.observable(DEFAULT_WORKSPACE_ID); // workspaceID, change to use a different conversation workspace.
        self.showDetails = ko.observable(false); // flag: show detail information in UI
        self.showSettingsPanel = ko.observable(false); // flag: show settings pane

        self.messages = ko.observableArray(); // contains objects {from: 'watson|user', text: '...'}
        self.userInput = ko.observable(''); // Input text field for chat
        self.lastResponse = ko.observable({}); // (raw) last response object from server
        self.conversationContext = ko.observable({}); // current conversation context.



        // context as string for display and sending to server
        self.conversationContextString = ko.computed(function(){
          return JSON.stringify(self.conversationContext(), null, 2);
        });
        // object containing the entities detected from the last response
        self.detectedIntents = ko.computed(function(){
          var intents = self.lastResponse().intents || {};
          console.log ("detected intents: ", intents);
          return intents;
        });
        // object containing the entities detected from the last response
        self.detectedEntities = ko.computed(function(){
          var entities = self.lastResponse().entities || {};
          console.log ("detected entities: ", entities);
          return entities;
        });

        // backend url path for text-to-speech (/text2speech?text=...).
        // As we use <audio autoplay ... >, audio will start as soon as we update the src attribute
        self.responseAudioUrl = ko.computed(function(){
            var text = self.lastResponse().output ? self.lastResponse().output.text : '';
            return "/text2speech?text=" + encodeURIComponent(text);
        });


        /**
         *
         */
        self.clearMessages = function() {
            self.messages([]);
            self.lastResponse({});
            self.conversationContext({});
        };



        /**
         * Send user input to server, update context from response
         **/
        self.send = function() {
            if (self.userInput != "") {
                var text = self.userInput();
                self.messages.push({
                    text: text,
                    from: 'user'
                });
                // push temporary placeholder response
                self.messages.push({
                    text: '...',
                    from: 'watson',
                    detectedIntents: {},
                    detectedEntities: {}
                });
                self.userInput(''); // clear input text

                // call backend which in turn calls the watson conversation service
                var textParam = "text=" + encodeURIComponent(text) ;
                var contextParam="context=" + encodeURIComponent(self.conversationContextString());
                var wsParam = "workspaceId=" + self.workspaceId();

                // call backend
                $.get("/watson-chat?"+ textParam + "&" + contextParam + "&" + wsParam,function(data) {
                    response = JSON.parse(data);
                    console.log(response);

                    self.lastResponse (response);
                    self.conversationContext (response.context || {});
                    // remove placeholder message and push Watson's response
                    self.messages.pop();
                    self.messages.push({
                        text: response.output.text,
                        from: 'watson',
                        detectedIntents: self.detectedIntents(),
                        detectedEntities: self.detectedEntities()
                    });

                    // stream audio text to speech
                    // $.get ("/text2speech?text="+ encodeURIComponent(response.output.text), function (data){
                    //   console.log (data);
                    // });


                });
            }
        }

    };

    var viewmodel = new ViewModel;
    ko.applyBindings(viewmodel);
</script>
